package shimlet

import (
	"reflect"
	"sync"
)

// ShimReg shim注册中心
type ShimReg struct {
	once            sync.Once
	shimletMetaList []reflect.Type
	targetPkg       string
	foundTypes      []reflect.Type
}

var (
	mu             = sync.Mutex{}
	constructorMap = map[string]func() Shimlet{}
)

// AutoRegister 泛型自动注册
func AutoRegister[T any]() {
	var zero T

	// 1. 从包路径提取名字
	t := reflect.TypeOf(zero)

	// 2. 检查 T 是否实现了 Shimlet
	_, ok := any(zero).(Shimlet)
	if !ok {
		panic("ShimReg: type " + reflect.TypeOf(zero).Name() + " does not implement Shimlet")
	}

	// 3. 创建构造函数（每次调用返回新实例）
	constructor := func() Shimlet {
		// t.Elem() 是 K8sShimlet（值类型）
		// reflect.New(t.Elem()) 创建一个 *K8sShimlet
		ptr := reflect.New(t.Elem()) // 返回 *K8sShimlet
		return ptr.Interface().(Shimlet)
	}

	// 4. 注册
	mu.Lock()
	tempShimlet := constructor()
	constructorMap[tempShimlet.ID()] = constructor
	tempShimlet = nil //内存回收???
	mu.Unlock()
}

func NewUninitialized(shimletId string) Shimlet {
	c := constructorMap[shimletId]
	return c()
}
